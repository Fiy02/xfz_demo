function News(){}News.prototype.run=function(){var e=this;e.ListenUploadFileEvent(),e.initUEditor(),e.ListenSubmitEvent()},News.prototype.ListenUploadFileEvent=function(){var o=$("#thumbnail-btn");o.change(function(){var e=o[0].files[0],t=new FormData;t.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:t,processData:!1,contentType:!1,success:function(e){if(200===e.code){var t=e.data.url;$("#thumbnail-form").val(t)}}})})},News.prototype.ListenQiniuuploadFileEvent=function(){var s=this;$("#thumbnail-btn").change(function(){var a=this.files[0];xfzajax.get({url:"/cms/qntokon/",success:function(e){if(200===e.code){var t=e.data.tokon,o=(new Date).getTime()+"."+a.name.split(".")[1],n={fname:o,params:{},mimeType:["image/png","image/jpeg","image/gif","video/x-ms-wmv","video/mp4","video/x-flv"]},i={useCdnDomain:!0,retryCount:6,region:qiniu.region.z2};qiniu.upload(a,o,t,n,i).subscribe({next:s.handFileUploadProcess,error:s.handFileUploadError,complete:s.handFileUploadComplete})}}})})},News.prototype.handFileUploadProcess=function(e){var t=e.total.percent.toFixed()+"%";News.progressGroup.show();var o=$(".progress-bar");o.css({width:t}),o.text(t)},News.prototype.handFileUploadError=function(e){window.messageBox.showError(e.message),News.progressGroup.hide(),console.log(e.message)},News.prototype.handFileUploadComplete=function(e){console.log(e),News.progressGroup.hide();var t="http://ps96zui1h.bkt.clouddn.com/"+e.key;$("input[name='thumbnail']").val(t)},News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{serverUrl:"/ueditor/upload/",initialFrameHeight:300})},News.prototype.ListenSubmitEvent=function(){$("#submit-btn").click(function(e){e.preventDefault();var t=$(this).attr("data-news-id"),o=$("input[name='title']").val(),n=$("select[name='category']").val(),i=$("input[name='desc']").val(),a=$("input[name='thumbnail']").val(),s=window.ue.getContent(),r="";r=t?"/cms/edit_news/":"/cms/write_news/",xfzajax.post({url:r,data:{title:o,desc:i,category:n,content:s,thumbnail:a,pk:t},success:function(e){200===e.code&&xfzalert.alertSuccess("恭喜，新闻发表成功！",function(){window.location.reload()})}})})},$(function(){(new News).run(),News.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
